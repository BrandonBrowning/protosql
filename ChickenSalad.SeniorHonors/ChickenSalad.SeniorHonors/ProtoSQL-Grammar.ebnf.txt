; ProtoSQL - A succinct language that cross-compiles to SQL
;  for a Senior Honors Project
;  by Brandon Browning

; Assumed symbols:
;   <EOF>
;   <int>
;   <float>
;   <sql-string-text> ; For simplicity, the allowed SQL text between single quote (')'s in a string
;   <newline>
;   <tab>
; Note: No strings are escaped; instead the above symbols are used

<proto-sql> ::= 
	<data-expr> <spacing>
	<where-clause>? <spacing>
	<order-by-clause>? <spacing>
	<select-clause>? <spacing>

<data-expr> ::= <join>+ | <table>
<join> ::= <table> <spacing> <join-arrow> <spacing> table> <join-tuple>?
<join-tuple> ::= "(" <spacing> <join-tuple-body> <spacing> ")"
<join-tuple-body> ::= <bracket-ident> (<spacing> "," <spacing> <bracket-ident>)?
<join-arrow> ::= "-->" | "-=>" | "-x>"

<where-clause> ::= <where>+v
<where> ::= "?" (<where-id> | <value-expr>)
<where-id> ::= <int> | <tuple>

<order-by-clause> ::= <order-by>+
<order-by> ::= <order-by-type> <opt-spacing> <column> <spacing>
<order-by-type> ::= "//" | "\\"

<select-clause> ::= ("{" <spacing> <select-body> <spacing> "}")
<select-body> ::= (<select> <spacing> <select-seperator> <spacing>)* <select> <spacing> <select-seperator>?
<select> ::= (<ident-or-bracket> <spacing> "=" <spacing>) <value-expr>
<select-seperator> ::= (";" | <newline>)

<column> ::= <tri-string>
<table> ::= <tri-string>
<tri-string> ::= <ident-or-bracket> (<spacing> "." <spacing> <ident-or-bracket>){0,2}

<tuple> ::= "(" <tuple-body> ")"
<tuple-body> ::= <value-expr> (<spacing> "," <spacing> <value-expr>)* <spacing> ","?

<value-expr> ::= <binary-op> | <f-call> | <primative>
<primative> ::=  <string> | <int> | <float> | <literal>
<string> ::= "'" <sql-string-text>  "'"
<literal> ::= <ident>
<binary-op> ::= <value-expr> <opt-spacing> <binary-op-name> <opt-spacing> <value-expr>
<binary-op-name> ::= "&&" | "||" | "<" | "<=" | ">" | ">=" | "~" | "!~" | "=" | "!=" | "%" | "*" | "/" | "+" | "-"
<f-call> ::= <ident> <tuple>

<spacing> ::= <space-or-newline>?
<space-or-newline> ::= <space> | <newline>
<space> ::= " " | <tab>

<ident-or-bracket> ::= <bracket-ident> | <ident>

<bracket-ident> ::= "[" <bracket-ident-part>+ "]"
<bracket-ident-part> ::= <digit-letter> | <bracket-ident-symbol>
<bracket-ident-symbol> ::= <space> | "." | "/" | "\"

<ident> ::= <ident-head> <ident-tail>
<ident-head> ::= "_" | <letter>
<ident-tail> ::= "" | <digit-letter> <ident-tail>

<digit-letter> ::= <letter> | <digit>
<digit> ::= "0" | "1" | "2" | ... | "9"
<letter> ::= <lower-letter> | <upper-letter>
<lower-letter> ::= "a" | "b" | ... | "z"
<upper-letter> ::=  "A" | "B" | ... | "Z"